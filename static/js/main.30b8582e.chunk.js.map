{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ImageLi","props","react_default","a","createElement","className","src","data-src","imageName","suff","alt","gif","loading","class","title","subtitle","document","addEventListener","loadImage","img","setAttribute","getAttribute","onload","allItems","getElementsByClassName","i","length","resizeMasonryItem","resizeAllMasonryItems","item","grid","rowGap","parseInt","window","getComputedStyle","getPropertyValue","rowHeight","rowSpan","Math","ceil","querySelector","getBoundingClientRect","height","style","gridRowEnd","querySelectorAll","forEach","App","version","id","x","y","viewBox","enable-background","fill","stroke","stroke-miterlimit","d","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.30b8582e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport SmoothImage from 'react-smooth-image';\nimport imagesLoaded from 'imagesloaded';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n\n    <div className=\"wrapper\">\n    <div className=\"header\">\n      <svg version=\"1.1\" id=\"Layer_1\"  x=\"0px\" y=\"0px\"\n      \t viewBox=\"0 0 479 451\" enable-background=\"new 0 0 479 451\">\n         <path fill=\"none\" stroke=\"#FFFFFF\" stroke-miterlimit=\"10\" d=\"M295,123.5c22,0,44.6-61.5,32.6-61.5c-16,0-56.1,111-30,111c17.9,0,30.9-37.5,30.9-37.5 M331,126.5\n          \tc14,0,53.6-64.5,33.6-64.5c-16,0-71,135-15,135c37.9,0,57.9-73,22-73c-9.1,0-16,9-16,9 M260,207.5c4,0,7,3,7,9c0,20-19,39-19,56\n          \tc0,6,4,8.5,8.6,8.5c16,0,35.9-45.5,35.9-45.5 M325.5,214.5c0,0-20,66.5-36.9,66.5c-19.1,0,8-45,8-65 M308.5,195.5\n          \tc0,0,0,21.5,34,21.5c12,0-21.9,64-3.9,64c9,0,23.9-33.5,23.9-33.5 M232.6,224c0,0,2.4-10-7-10c-18.6,0-49.1,69-21,69\n          \tc23.4,0,53.4-66.5,40.4-66.5c-12,0-8.5,117-60.5,117c-36,0-54.5-25-85.5-25c-50,0-50,77,2,77c45,0,68-96,51-96c-15,0-42,95.5-6,95.5\n          \tc23,0,35.5-47.5,35.5-47.5 M195,300.5c0,0-37,85-8,85c12,0,19-16,19-16 M383,297.5c0.4,0.4-43,103,6,103c36,0,56.5-67,23-67\n          \tc-12.5,0-20,13-20,13 M238.5,329.5c0,0-8.5,16-8.5,31s7.5,25.5,20.6,25.5c21.6,0,39.2-36,39.2-62.9c0-16.6-11.3-29.6-27.8-29.6\n          \tc-29.5,0-31.5,46,10.5,46c29,0,37-18.5,42.1-18.5c11.9,0-16.6,39.5-16.6,56.5c0,5,4,8.5,8.6,8.5c16,0,35.9-48.5,35.9-48.5\n          \t M345.6,321c0,4.3-1.1,9.9-2.8,16c-5.9,21.6-17.8,49-3.8,49c13,0,31.5-49.5,31.5-49.5 M180.5,126.5c0,0-10.5,11-10.5,30\n          \tc0,7.9,5,16.5,13.6,16.5c26,0,40.8-66,13.4-66c-18.5,0-21.5,30,4.6,30c20,0,30.4-28.5,36.4-28.5c11.6,0-16,41-16,56\n          \tc0,6,3.9,8.5,8.6,8.5c16,0,36.9-49.5,36.9-49.5 M270.6,108c0,20-27,65-11,65c12,0,33.9-44.5,33.9-44.5 M130,225.5c0,0,8.5,4,27.5,4\n          \tc12,0,18-4,21-4c12,0-31,56-9.5,56c10,0,26.5-27,26.5-27 M77.5,117.5c-48,0-43-81.1,15-81.1c21,0,36,14.1,36,32.1\n          \tc0,33-26.9,59-26.9,83.5c0,12.5,7.4,17,14,17c34,0,73-98,59-98c-15.6,0-31.1,182.5-86.1,182.5c-46,0-43-68,10-68\n          \tc34,0,60.5,19,86.5,19c25,0,25-23,5-23c-41,0-37.5,107-92,107c-19.5,0-29-10-29-10 M362.6,247c28,0,38-33,24-33\n          \tC362,214,334,327.5,382,327.5c40,0,58.5-76,24-76c-16.5,0-23,19-23,19\"/>\n      </svg>\n\n\n      <div className=\"info\">\n        <h1>\n          Shana Hu\n        </h1>\n\n        <h2>\n          Artist and designer based in San Francisco\n        </h2>\n\n      </div>\n    </div>\n\n\n\n      <div className=\"images\">\n        <ul className=\"masonry\">\n          <ImageLi imageName=\"rabbitenvelope\" title=\"\" subtitle=\"\" />\n          <ImageLi imageName=\"swimming\" suff=\".png\" title=\"\" subtitle=\"\" gif=\"true\" />\n          <ImageLi imageName=\"palettes\" suff=\".png\" title=\"\" subtitle=\"\" gif=\"true\" />\n          <ImageLi imageName=\"lark\" suff=\".png\" title=\"\" subtitle=\"\" />\n          <ImageLi imageName=\"25\" title=\"25\" subtitle=\"Lasercut custom lettering\" alt=\"Wood panel with the number 25 lasercut\" />\n          <ImageLi imageName=\"dogdaze\" suff=\".png\" title=\"\" subtitle=\"\" gif=\"true\" />\n          <ImageLi imageName=\"numbergestures\" title=\"Chinese Number Gestures\" subtitle='Risograph prints, 11x17' />\n          <ImageLi imageName=\"notes\" title=\"Notes to self\"  subtitle=\"Pen-plotted custom lettering on Post-its\" alt=\"Three post-its that read: 'You'll figure it out', 'What's the worst that could happen?', and 'Make it happen'\"/>\n          <ImageLi imageName=\"hongbao\" title=\"Red envelopes\" subtitle=\"Pen-plotted custom lettering with generated fills and patterns\" alt=\"A pile of red envelopes decorated with Chinese characters that mean 'Wishing you good fortune' and 'Prosper'\" />\n          <ImageLi imageName=\"holiday\" title=\"Holiday card\" subtitle=\"Pen-plotted custom lettering\" alt=\"A card with illustrative lettering that reads 'Hope you have a cozy and relaxing holiday'\" />\n          <ImageLi imageName=\"tigerenvelope\" title=\"\" subtitle=\"\" />\n          <ImageLi imageName=\"birthday\" title=\"Happy birthday\" subtitle=\"Hand-lettered and pulled screen print\" alt=\"Paper card with Chinese characters meaning 'Happy birthday'\"/>\n        </ul>\n      </div>\n\n\n    </div>\n    </div>\n  );\n}\n\nfunction ImageLi(props) {\nreturn (\n    <li className=\"masonry-brick\">\n      <img\n        src=\"./images/small-transparent.png\"\n        data-src={'./images/'+props.imageName+(props.suff ? ''+props.suff : '.jpg')}\n        alt={props.alt}\n        className={'masonry-content ' + (props.gif ? props.imageName: '')}\n        loading=\"lazy\"\n        // transitionTime={0.3}\n        // imageStyles={{overflow: \"visible\"}}\n      />\n      <h3 class=\"subtitle\">{props.title}</h3>\n      <p class=\"subtitle\">{props.subtitle}</p>\n    </li>\n  )\n\n}\n\nfunction SmoothImageLi(props) {\n  return (\n    <li>\n      <SmoothImage\n        src={'./images/'+props.imageName+'.jpg'}\n        alt={props.alt}\n        transitionTime={0.3}\n        imageStyles={{overflow: \"visible\"}}\n\n        //Other props if you choose to use them\n      />\n      <p>{props.title}</p>\n      <p>{props.subtitle}</p>\n    </li>\n  )\n}\n\nfunction TextLink(props) {\n  return (\n    <a href={props.link} target=\"_blank\" rel=\"noopener noreferrer\">{props.text}</a>\n  )\n}\n\n\n// function Calculate() {\n//     /**\n//    * Set appropriate spanning to any masonry item\n//    *\n//    * Get different properties we already set for the masonry, calculate \n//    * height or spanning for any cell of the masonry grid based on its \n//    * content-wrapper's height, the (row) gap of the grid, and the size \n//    * of the implicit row tracks.\n//    *\n//    * @param item Object A brick/tile/cell inside the masonry\n//    */\n//   function resizeMasonryItem(item){\n//     /* Get the grid object, its row-gap, and the size of its implicit rows */\n//     var grid = document.getElementsByClassName('masonry')[0],\n//         rowGap = parseInt(window.getComputedStyle(grid).getPropertyValue('grid-row-gap')),\n//         rowHeight = parseInt(window.getComputedStyle(grid).getPropertyValue('grid-auto-rows'));\n\n//     /*\n//     * Spanning for any brick = S\n//     * Grid's row-gap = G\n//     * Size of grid's implicitly create row-track = R\n//     * Height of item content = H\n//     * Net height of the item = H1 = H + G\n//     * Net height of the implicit row-track = T = G + R\n//     * S = H1 / T\n//     */\n\n//     // console.log(item.querySelector('.masonry-content').getBoundingClientRect())\n//     var rowSpan = Math.ceil((item.querySelector('.masonry-content').getBoundingClientRect().height+rowGap)/(rowHeight+rowGap));\n\n//     /* Set the spanning as calculated above (S) */\n//     item.style.gridRowEnd = 'span '+rowSpan;\n//   }\n\n//     /**\n//    * Apply spanning to all the masonry items\n//    *\n//    * Loop through all the items and apply the spanning to them using \n//    * `resizeMasonryItem()` function.\n//    *\n//    * @uses resizeMasonryItem\n//    */\n//   function resizeAllMasonryItems(){\n//     // Get all item class objects in one list\n//     var allItems = document.getElementsByClassName('masonry-brick');\n\n//     /*\n//     * Loop through the above list and execute the spanning function to\n//     * each list-item (i.e. each masonry item)\n//     */\n//     for(var i=0;i<allItems.length;i++){\n//       resizeMasonryItem(allItems[i]);\n//     }\n//   }\n\n//   /**\n//    * Resize the items when all the images inside the masonry grid \n//    * finish loading. This will ensure that all the content inside our\n//    * masonry items is visible.\n//    *\n//    * @uses ImagesLoaded\n//    * @uses resizeMasonryItem\n//    */\n//   function waitForImages() {\n//     var allItems = document.querySelectorAll('.masonry-brick');\n//     for(var i=0;i<allItems.length;i++){\n//       imagesLoaded( allItems[i], function(instance) {\n//         var item = instance.elements[0];\n//         resizeMasonryItem(item);\n//       } );\n//     }\n//   }\n\n//   /* Resize all the grid items on the load and resize events */\n//   var masonryEvents = ['load', 'resize'];\n//   masonryEvents.forEach( function(event) {\n//     window.addEventListener(event, resizeAllMasonryItems);\n//   } );\n\n//   /* Do a resize once more when all the images finish loading */\n//   waitForImages();\n\n// }\n//Calculate();\n\n\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  const masonryItems = document.querySelectorAll('.masonry-brick img');\n\n  function loadImage(img) {\n    img.setAttribute('src', img.getAttribute('data-src'));\n    img.onload = function() {\n        // Once the image is loaded, adjust layout if needed\n        adjustMasonryLayout();\n    };\n  }\n\n   /**\n   * Set appropriate spanning to any masonry item\n   *\n   * Get different properties we already set for the masonry, calculate \n   * height or spanning for any cell of the masonry grid based on its \n   * content-wrapper's height, the (row) gap of the grid, and the size \n   * of the implicit row tracks.\n   *\n   * @param item Object A brick/tile/cell inside the masonry\n   */\n   function resizeMasonryItem(item){\n    /* Get the grid object, its row-gap, and the size of its implicit rows */\n    var grid = document.getElementsByClassName('masonry')[0],\n        rowGap = parseInt(window.getComputedStyle(grid).getPropertyValue('grid-row-gap')),\n        rowHeight = parseInt(window.getComputedStyle(grid).getPropertyValue('grid-auto-rows'));\n\n    /*\n    * Spanning for any brick = S\n    * Grid's row-gap = G\n    * Size of grid's implicitly create row-track = R\n    * Height of item content = H\n    * Net height of the item = H1 = H + G\n    * Net height of the implicit row-track = T = G + R\n    * S = H1 / T\n    */\n\n    // console.log(item.querySelector('.masonry-content').getBoundingClientRect())\n    var rowSpan = Math.ceil((item.querySelector('.masonry-content').getBoundingClientRect().height+rowGap)/(rowHeight+rowGap));\n\n    /* Set the spanning as calculated above (S) */\n    item.style.gridRowEnd = 'span '+rowSpan;\n  }\n\n    /**\n   * Apply spanning to all the masonry items\n   *\n   * Loop through all the items and apply the spanning to them using \n   * `resizeMasonryItem()` function.\n   *\n   * @uses resizeMasonryItem\n   */\n  function resizeAllMasonryItems(){\n    // Get all item class objects in one list\n    var allItems = document.getElementsByClassName('masonry-brick');\n\n    /*\n    * Loop through the above list and execute the spanning function to\n    * each list-item (i.e. each masonry item)\n    */\n    for(var i=0;i<allItems.length;i++){\n      resizeMasonryItem(allItems[i]);\n    }\n  }\n\n  function adjustMasonryLayout() {\n    // Code to adjust the masonry layout goes here\n    // This could involve using a library or custom JavaScript logic\n    // to arrange the grid based on the loaded image sizes\n    resizeAllMasonryItems();\n  }\n\n\n  // Load images when the DOM content is loaded\n  masonryItems.forEach(function(img) {\n    loadImage(img);\n  });\n\n});\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}